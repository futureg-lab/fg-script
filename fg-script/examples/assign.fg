tup x = 58 .. x .. 3 + 4 * 3 and 5;

num x = 1 * (2 + some_func(4 * zzz / 1, 2, x));

// nested tuple
tup z = [1, 2] * [
	1, 2, 3, 
	[4, 5],
	[6],
	[1, 2, [3, 4], [7, 8], 9]
];
tup x = [];

tup k = [
	a : 3, c : 4, "hh" : [1, 2],
	4 : 5
];

tup example_dic = [
	a : 6,
	b : 8,
	c :  [
		e : "Some text",
		h : 3,
		q : [1, 2, 3, 4, 5]
	]
];

//
//
// while x and y {
//	num z = random();
//	print(z + "yay!");
// }

for x in [1, 2, 3] {
	print("hello world!");
}

for (x, y) in [1, 2, 3] * 2 + 3 {
	print("hello world!");
}

for x in 1 .. 10 {
	print(i);
	if x >= 3 and x < 5 {
		continue;
	} elif x < 9 {
		break;
	}
}

// numbers
num a = 1 * 2 + 3.65;

someFuncCall();
anotherFuncCall(5, 1 * 2 + 4, false);
num x = null;
bool y = true or false;
ret 1 + 1;
err "some error";

bool x = null;


fn someFunc(num one, str two, tup x) -> num
{
	num x = 1 * (2 + some_func(4 * zzz / 1, 2, x));
	bool y = false and true or false;
	if (x > 0) {
		ret 1;
	} elif (x > 0 and x < 3) {
		ret 2;
	} elif (x >= 4 and x < 6) {
		if (x > 0) {
			ret 1;
		} elif (x > 0 and x < 3) {
			ret 2;
		} elif (x >= 4 and x < 6) {
			if (x > 2) {
				ret 4;
			} else {
				ret 5;
			}
			ret 3;
		} elif (x >= 4 and x < 6) {
			// some stuff
			num z = 3;
			num x = 2 * (4 + x) * y;
			ret 5;
		} else {
			ret 4;
		}
		ret 3;
	} elif (x >= 4 and x < 6) {
		ret 5;
	} else {
		ret 4;
	}

	ret not y and false or true;
}

extern fn someExternalFunc(str url, num param) -> str;

expose fn sayHelloMaj(str name) -> str {
    str res = upperCase("Hello " + name);
    ret res + "!";
}

fn someFuncError(num one, str two, tup four) -> num
{
	num x = 1 * (2 + some_func(4 * zzz / 1, 2, x));
	bool y = false and true or false;
	err "SOme error" + x;
}