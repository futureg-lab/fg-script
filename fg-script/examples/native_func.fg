

println("max {0}", max(1, 2));
println("min {0}", min(1, 2));
println("sqrt {0}", sqrt(2));
println("log {0}", log(2));
println("pow {0}", pow(2, 3));
println("rand {0}", rand());
println("len str {0}", len("hello world"));
println("len tup {0}", len([ 1, 2, 3, [4] ]));

println("==== Conversion ====");

fn to_str_test(auto v) -> void {
	str res = to_str(v);
	println("to_str :: {0} ({1}) => {2} ({3})", v, repr_of v, res, repr_of res);
}
fn to_tup_test(auto v) -> void {
	tup res = to_tup(v);
	println("to_tup :: {0} ({1}) => {2} ({3})", v, repr_of v, res, repr_of res);
}
tup test_items = [
	5,
	"5",
	["x" : pow(2, 3), y : "9"]
];
for item in test_items {
	to_str_test(item);
	to_tup_test(item);
}

tup test_str = ["12.65", ".687", "1234.68"];
for test in test_str {
	println("to_num :: {0} (str) => {1}", test, to_num(test));
}

// println(null);

// todo
/*
sin, cos, abs, tan, tanh

split("::ds", "some.input")
join(",", tup)
add operate between tups +, -, *, / (generalize)
 bin(a, b, lambda(i <- a, j <- b))

num x = input();

fmt
push
pop
first
last
slice_of(str or tup) :: substr logic
map(tup, any)
assign
array assign
delete
*/